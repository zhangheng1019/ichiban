"""
Django settings for apple project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'kara-@#r73gb5xo**#&xo!8-$f-le5&v0h0sux#e21!p2hfm2d'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'xadmin',           # 添加
    'crispy_forms',     # 添加
    'reversion',        # 添加(可选)
    'Basic_info',
    'Order',
    'Finance',
    'POM',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


# --------------------------屏蔽跨域------------------------

CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True  # 允许跨域名访问

CORS_ORIGIN_WHITELIST = (
    '*',
)

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)

# 允许所有的请求头
CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
)
# --------------------------------------------------------------

ROOT_URLCONF = 'apple.urls'

# 模板路径
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.i18n',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.tz',
                'django.template.context_processors.static',
                'django.template.context_processors.media',
            ],
        },
    },
]

# 网关应用
WSGI_APPLICATION = 'apple.wsgi.application'
# 默认登录页面
LOGIN_URL = '/login/'

# ---------------------------Database--------------------------
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# 使用MySQL数据库
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'apple',                              # 数据库
#         'USER': 'root',                               # 数据库连接账户
#         'PASSWORD': '194356',                         # 数据库连接密码
#         'HOST': 'localhost',                          # 数据库服务地址
#         'PORT': 3306,                                 # 数据库连接端口
#         'OPTIONS': {
#             'charset': 'utf8mb4'
#         },
#     },
# }

# 使用SQLServer数据库
DATABASES = {
    'default': {
        'ENGINE': 'sql_server.pyodbc',			        # odbc连接固定写法
        'NAME': 'appleEW',				                # 自定义数据库连接名
        'USER': 'sa',					                # 数据库连接账户
        'PASSWORD': 'crescentsql',				        # 数据库连接密码
        'HOST': '218.17.172.183',				        # 数据库服务地址
        'PORT': '1433',					                # 数据库连接端口
        'OPTIONS': {
            'driver': 'SQL Server Native Client 10.0',  # ODBC连接应用驱动
            'MARS_Connection': True,
        }
    }
}
# --------------------------------------------------------------------

# --------------------------------------------------------------------
# models--->增加models SQL日志，并生成日志文件
BASE_LOG_DIR = os.path.join(BASE_DIR, "logs", "message.log")

LOGGING = {
    'version': 1,  # 版本
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_LOG_DIR,  # 路径
            'maxBytes': 1024 * 1024 * 500,
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
        'request_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_LOG_DIR,  # 路径
            'maxBytes': 1024 * 1024 * 500,
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'scprits_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_LOG_DIR,  # 路径
            'maxBytes': 1024 * 1024 * 500,
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['default', 'console'],
            'level': 'INFO',
            'propagate': True
        },
        # 数据库日志
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
        },
        'django.request': {
            'handlers': ['request_handler'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True
        },
        'scripts': {
            'handlers': ['scprits_handler', 'console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True,
        },
        'apple.Basic_info': {
            'handlers': ['default', 'console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True
        },
        'apple.Order': {
            'handlers': ['scprits_handler', 'console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True,
        },
        'apple.Finance': {
            'handlers': ['scprits_handler', 'console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True,
        },
    }
}
# --------------------------------------------------------------------------

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators
# 使用登录验证的模型
# AUTH_USER_MODEL = 'Order.User_extension'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# -------------------------------------------------------------------------

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'
# LANGUAGE_CODE = 'en'

TIME_ZONE = 'Asia/Shanghai'
# TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False

LANGUAGES = (
    ('de-DE', ('德语',)),
    ('en', ('英语',)),
    ('es-MX', ('西班牙语',)),
    ('eu', ('巴斯克语',)),
    ('id-ID', ('印度尼西亚语',)),
    ('ja', ('日语',)),
    ('lt', ('立陶宛语',)),
    ('nl-NL', ('荷兰语',)),
    ('pl', ('波兰语',)),
    ('pt-BR', ('葡萄牙语',)),
    ('ru-RU', ('俄语',)),
    ('it', ('意大利语',)),
    ('zh-hans', ('中文简体',)),
    ('zh-hant', ('中文繁體',)),
)
# ----------------------------------------------------------------------------

# 翻译文件所在目录，需要手工创建，由于使用xadmin，故国际化文件在xadmin文件夹
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

# 静态文件访问路径
STATIC_URL = '/static/'
# 这个配置是为了通过ip地址直接访问到静态文件
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)
# 静态文件收集目录
STATIC_ROOT = os.path.join(BASE_DIR, 'collect_static')


# 媒体文件(用户自定义文件路径)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# 媒体文件访问路径
MEDIA_URL = '/media/'


# 设置session_id最大存活时间为24小时
SESSION_COOKIE_AGE = 60 * 60 * 24
# 设置浏览器关闭时session是否失效 True/False
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
